<?xml version="1.0"?>
<xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    version="1.0"   
    xmlns:java="http://xml.apache.org/xslt/java"
    xmlns:redirect="org.apache.xalan.xslt.extensions.Redirect"
    extension-element-prefixes="redirect"
    exclude-result-prefixes="java">

<!-- parameter declaration -->
<xsl:param name="date"/>
<xsl:param name="author"/>
<xsl:param name="package"/>
<xsl:param name="classname"/>
<xsl:param name="descriptionfilename"/>

<xsl:template match="root">
<project name="build for UPnP Device Source Generation generated by {$author} at {$date}"
	default="main"
	basedir=".">

	<target name="main" depends="init">
		<xsl:apply-templates select="device" mode="calltarget"/>
	</target>

	<target name="init">
		<mkdir dir="generated"/>
		<tstamp>
			<format property="date" pattern="d-MMMM-yyyy hh:mm aa" locale="en"/>
		</tstamp>
		<property name="generation.dir" value="generated"/>
		<property name="author" value="{$author}"/>
	</target>

	<xsl:apply-templates select="device" mode="target"/>
	
   	<!-- clean generated files and backup files -->
	<target name="clean">
		<delete dir="generated"/>
	</target>

</project>

</xsl:template>


<xsl:template match="device" mode="calltarget">
	<antcall target="generate"/>
</xsl:template>

<xsl:template match="device" mode="target">

<xsl:variable name="path" select="translate($package, '.', '/')"/>

	<target name="generate">
  	
		<mkdir dir="${{generation.dir}}/res"/>
		<mkdir dir="${{generation.dir}}/manifest"/>
		<mkdir dir="${{generation.dir}}/src/{$path}"/>
		<mkdir dir="${{generation.dir}}/src/{$path}/device"/>
		<mkdir dir="${{generation.dir}}/src/{$path}/service"/>
		<mkdir dir="${{generation.dir}}/src/{$path}/impl"/>

		<xslt 	in="{$descriptionfilename}"
			out="${{generation.dir}}/src/{$path}/device/{$classname}.java"
			style="device2class.xsl" 
			classpath="."
		>
			<param name="date" expression="${{date}}"/>
			<param name="author" expression="${{author}}"/>
			<param name="package" expression="{$package}"/>
			<param name="classname" expression="{$classname}"/>
			<outputproperty name="method" value="text"/>
			<outputproperty name="encoding" value="ISO-8859-1"/>
			<outputproperty name="indent" value="yes"/>
		</xslt>

		<xsl:apply-templates select="serviceList/service" mode="target"/>
		
	</target>

</xsl:template>

<xsl:template match="service" mode="target">

<xsl:variable name="serviceType" select="java:UPnPGenerationUtility.serviceType(./serviceType)"/>
<xsl:variable name="serviceTypeVersion" select="java:UPnPGenerationUtility.serviceTypeVersion(./serviceType)"/>
<xsl:variable name="classname" select="$serviceType"/>
<xsl:variable name="path" select="translate($package, '.', '/')"/>

		<xslt 	in="res/service/{$serviceTypeVersion}.xml"
			out="${{generation.dir}}/src/{$path}/service/{$classname}.java"
			style="scdp2class.xsl" 
			classpath="."
		>
			<param name="date" expression="${{date}}"/>
			<param name="author" expression="${{author}}"/>
			<param name="package" expression="{$package}"/>
			<param name="classname" expression="{$classname}"/>
			<outputproperty name="method" value="text"/>
			<outputproperty name="encoding" value="ISO-8859-1"/>
			<outputproperty name="indent" value="yes"/>
		</xslt>

		<xslt 	in="res/service/{$serviceTypeVersion}.xml"
			out="${{generation.dir}}/src/{$path}/{$classname}Model.java"
			style="scdp2itf.xsl" 
			classpath="."
		>
			<param name="date" expression="${{date}}"/>
			<param name="author" expression="${{author}}"/>
			<param name="package" expression="{$package}"/>
			<param name="classname" expression="{$classname}"/>
			<outputproperty name="method" value="text"/>
			<outputproperty name="encoding" value="ISO-8859-1"/>
			<outputproperty name="indent" value="yes"/>
		</xslt>


</xsl:template>

    <xsl:template name="path">
        <xsl:param name="path"/>
        <xsl:if test="contains($path,'/')">
            <xsl:text>../</xsl:text>
            <xsl:call-template name="path">
                <xsl:with-param name="path"><xsl:value-of select="substring-after($path,'/')"/></xsl:with-param>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="not(contains($path,'/')) and not($path = '')">
            <xsl:text>../</xsl:text>
        </xsl:if>
    </xsl:template>

    <!--
    Replace DOS characters in a path.
    Replace '.' with '/'
    -->
    <xsl:template name="packageToPath">
        <xsl:param name="path"/>
        <xsl:value-of select="translate($path, '.', '/')"/>
    </xsl:template>
    
<xsl:template match="*"></xsl:template>

</xsl:stylesheet>
